#pragma once

#include <fstream>
#include <sstream>
#include <mr_task_factory.h>
#include "mr_tasks.h"
#include <iostream>
#include <string>
#include <stdio.h>
#include <cstdio>
#include <vector>
#include <grpc++/grpc++.h>
#include <unistd.h>
#include <cstdlib>
#include "masterworker.grpc.pb.h"

using grpc::Server;
using grpc::ServerBuilder;
using grpc::ServerContext;
using grpc::Status;

using masterworker::FileChunk;
using masterworker::MapStatus;
using masterworker::ReduceStatus;
using masterworker::Empty;
using masterworker::WorkerStatus;
using masterworker::MasterWorker;

using namespace std;
extern std::shared_ptr<BaseMapper> get_mapper_from_task_factory(const std::string& user_id);
extern std::shared_ptr<BaseReducer> get_reducer_from_task_factory(const std::string& user_id);

/* CS6210_TASK: Handle all the task a Worker is supposed to do.
	This is a big task for this project, will test your understanding of map reduce */
class Worker {

	public:
		/* DON'T change the function signature of this constructor */
		Worker(std::string ip_addr_port);

		/* DON'T change this function's signature */
		bool run();

	private:
		/* NOW you can add below, data members and member functions as per the need of your implementation*/
		std::string ip_addr_port;
};

class WorkerService final : public MasterWorker::Service {

  public:
    WorkerService(const std::string& server_address, std::shared_ptr<BaseMapper> mapper, std::shared_ptr<BaseReducer> reducer, int n_int_files, vector<string> intermediate_files) : id_("Worker_" + server_address) {
	this->mapper 		= mapper;
	this->reducer 		= reducer;
	this->temp_files 	= intermediate_files;
	this->num_files 	= n_int_files;
}

  private:
    Status DoMap(ServerContext* context, const FileChunk* request, MapStatus* reply) override {
			busy = true;
			std::string fileChunkName = request->name();
			std::cout<<"Map Task : Reading file : "<<fileChunkName<<std::endl;
			FILE *fileChunk;
			fileChunk = fopen(fileChunkName.c_str(), "r");
			char * line = NULL;
    			size_t len = 0;
			string str;

			if(fileChunk){
				while (getline(&line, &len, fileChunk) != -1) {
					str = string(line);
					str.erase( std::remove(str.begin(), str.end(), '\n'), str.end() );		// Remove trailing newline
       				 	mapper->map(str);
   				 }
			}
			else{
				std::cout<<" Map Task : File not found - " << fileChunkName << std::endl;
			}

			fclose(fileChunk);
			reply->set_map_status(true);
      reply->set_worker_id(id_);
			for(string temp_file : temp_files){
				reply->add_temp_files(temp_file);
			}
			busy = false;
			system( string("rm " + fileChunkName).c_str());							// Clean up : Remove shards that have been processed
      			return Status::OK;
    }


   Status DoReduce(ServerContext* context, const FileChunk* request, ReduceStatus* reply) override {
			busy = true;
			std::string fileChunkName = request->name();
			std::cout<<"Reduce Task : Reading intermediate files generated by mapper now" << std::endl;
			char *line = NULL;
    			std::map<string, vector<string>> map_res;					// Final map to be passed to reducer
			std::vector<string> tmp_res(2);
			vector<string> mr_temp_files;
			for(int i=0;i<request->temp_files_size();i++){
				mr_temp_files.push_back(request->temp_files(i));
			}
			for(int i=0;i<num_files;i++){
			    std::ifstream ifs (mr_temp_files[i].c_str(), std::ifstream::in);
   			    string line;
			    int indx;

				if(ifs){
			   		 while(getline(ifs,line) ){
						stringstream ss1(line);
	       		    			string token;
						indx = 0;

			         		while(getline(ss1,token,',')){

							tmp_res[indx] = token;
							indx++;
	  			  		}

						map_res[tmp_res[0]].push_back(tmp_res[1]);		// Save result in format expected by reducer
						tmp_res.clear();
			       		}
			   	 }
			}

			//IMP: Map sorts the key by default
			typedef std::map<std::string, std::vector<string>>::iterator it_type;
			for(it_type iterator = map_res.begin(); iterator != map_res.end(); iterator++) {

  			reducer->reduce(iterator->first, iterator->second);
			}

	// Remove all files created in the process
	string clean_up;
	for(int i=0;i<num_files;i++){
	  system(string("rm " + mr_temp_files[i]).c_str());
	}

      reply->set_reduce_status(true);
      reply->set_worker_id(id_);
      busy = false;
      return Status::OK;
    }


    Status CheckStatus(ServerContext* context, const Empty* request, WorkerStatus* reply) override {
      reply->set_worker_status(busy);
      return Status::OK;
    }

    //Properties
    const std::string id_;
    bool busy;
    int num_files;
    vector<string> temp_files;
    std::shared_ptr<BaseMapper> mapper;
    std::shared_ptr<BaseReducer> reducer;

};


/* CS6210_TASK: ip_addr_port is the only information you get when started.
	You can populate your other class data members here if you want */
Worker::Worker(std::string ip_addr_port) {
	this->ip_addr_port = ip_addr_port;
}

/* CS6210_TASK: Here you go. once this function is called your woker's job is to keep looking for new tasks
	from Master, complete when given one and again keep looking for the next one.
	Note that you have the access to BaseMapper's member BaseMapperInternal impl_ and
	BaseReduer's member BaseReducerInternal impl_ directly,
	so you can manipulate them however you want when running map/reduce tasks*/
bool Worker::run() {
	/*  Below 4 lines are just examples of how you will call map and reduce
		Remove them once you start writing your own logic */

	std::cout<<"Starting WorkerServer"<<std::endl;
	string worker_id 	= ip_addr_port;
	worker_id.replace(9,1,"_");

	// Generate map/reduce constants
	int num_output_files 	= 1;
	int num_int_files 	= 8;
	string path_output 	= "output/final_" + worker_id + ".txt";
	vector<string> intermediate_files;

	string temp;
	for(int i=0;i<num_int_files;++i){
	  temp = "output/"+ worker_id + "_tmp_" + to_string(i) + ".txt";
	  intermediate_files.push_back(temp);
	}

	// Pass the values to mr_tasks.h
	// Map phase details
	auto mapper = get_mapper_from_task_factory("cs6210");
	(mapper->impl_)->n_int_files 	    = num_int_files; 		// No. of intermediate files to be created by worker.
	(mapper->impl_)->intermediate_files = intermediate_files; 	// The path of filenames to be created by the individual workers

	// Reduce phase details
	auto reducer = get_reducer_from_task_factory("cs6210");
	(reducer->impl_)->output_file 	     = path_output;

	//Start the grpc server
	ServerBuilder builder;
	WorkerService service(this->ip_addr_port, mapper, reducer, num_int_files, intermediate_files);
	builder.AddListeningPort(this->ip_addr_port, grpc::InsecureServerCredentials());
  	builder.RegisterService(&service);

   	std::unique_ptr<Server> server(builder.BuildAndStart());
  	std::cout << "Worker listening on " << this->ip_addr_port << std::endl;

  	server->Wait();
	return true;
}
